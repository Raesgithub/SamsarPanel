@page "/cpanel/shop/catalog"
@using Application.Dtos.cpanel
@using Application.Repositories.Shop
@using Application.Repositories.cpanel
@using Domain.ViewModels
@using Microsoft.Extensions.Caching.Memory
@using Application.Repositories
@using Dapper
@using Domain.Resourses

@using Microsoft.Data.SqlClient

@using System.Diagnostics
@layout Layout.Cpanel.MainLayoutCpanel

@inject NavigationManager nav
@inject IMemoryCache cache
@inject IJSRuntime js
@rendermode InteractiveServer
<PageTitle>Home</PageTitle>

<div class="page-header">
    <div>
        <h3>کاربران</h3>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="#">کنترل پنل</a></li>
                <li class="breadcrumb-item active"><a href="#">کاربران</a></li>
            </ol>
        </nav>
    </div>
</div>
<!-- end::page header -->

<div class="card">
    <div class="card-body">
        <button @onclick="()=>{isAdd=true;catalog=new Domain.Models.shop.Catalog();}" class="btn btn-success mb-3">افزودن دسته جدید</button>
        @if (isAdd)
        {
            <div class="row">
                <div class="col-md-8 col-xl-6 mx-auto p-3 border shadow">
                    <EditForm Model="catalog" FormName="c1" Enhance OnValidSubmit="ValidSubmit">
                        <div class="mt-3">
                            <label class="from-lable">نام دسته</label>
                            <InputText @bind-Value="catalog.Name" class="form-control" />
                        </div>
                        <div class="mt-3">
                            <label class="from-lable">لوگوی دسته</label>
                            <InputText @bind-Value="catalog.Logo" class="form-control" />
                        </div>
                        <div class="mt-3 ">
                            <button class="btn btn-sm btn-success" type="submit">ثبت دسته جدید</button>
                            <button class="btn btn-sm btn-warning float-right" type="button" @onclick="()=>{isAdd=false;}">انصراف</button>
                        </div>
                    </EditForm>
                </div>

            </div>
        }
        else
        {

            <div class="table-responsive" tabindex="1" style="overflow: auto; outline: none;">
                <table class="table">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>لوگو</th>
                            <th>نام دسته</th>
                            <th></th>

                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in catalogList)
                        {
                            <tr>
                                <td>@item.Id</td>
                                <td>@(new MarkupString(item.Logo))  </td>
                                <td>@item.Name</td>
                                <td>
                                    <button class="btn btn-danger btn-sm" @onclick="()=>Delete(item)">حذف</button>
                                    <button class="btn btn-primary btn-sm" @onclick="()=>{isAdd=true;catalog=item;}">ویرایش</button>
                                </td>

                            </tr>
                        }

                    </tbody>
                </table>
            </div>
        }

    </div>
</div>
@code {
    bool isAdd = false;
    [SupplyParameterFromForm]
    public Domain.Models.shop.Catalog catalog { get; set; } = new Domain.Models.shop.Catalog();
    public List<Domain.Models.shop.Catalog> catalogList { get; set; } = new List<Domain.Models.shop.Catalog>();

    async Task Delete(Domain.Models.shop.Catalog cat)
    {
        if (await js.InvokeAsync<bool>("saQuestion", "هشدار", "پس از حذف قادر به بازیابی نمی باشد") == false) return;

        var catRepository = new CatalogRepository();
        var res = await catRepository.DeleteAsync(cat.Id);
        if (res.IsSuccess)
        {
            await js.InvokeVoidAsync("toast", "حذف شد");
            catalogList.Remove(cat);
        }
        else
        {
            await js.InvokeVoidAsync("toastError", res.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var catRepository = new CatalogRepository();
        catalogList = await catRepository.GetAllAsync();
    }

    async Task ValidSubmit()
    {
        if (string.IsNullOrEmpty(catalog.Name))
        {
            await js.InvokeVoidAsync("toastError", "نام دسته محصول را وارد نمایید");
            return;
        }

        // 🟢 اگر لوگو SVG است، سایز را 64px تنظیم کن
        if (!string.IsNullOrWhiteSpace(catalog.Logo) && catalog.Logo.TrimStart().StartsWith("<svg", StringComparison.OrdinalIgnoreCase))
        {
            catalog.Logo = FixSvgSize(catalog.Logo, 64);
        }

        var catRepository = new CatalogRepository();
        ResultDto resultDto;
        bool isUpdate = false;
        if (catalog.Id == 0)
        {
            resultDto = await catRepository.AddAsync(catalog);
            isUpdate = false;
        }
        else
        {
            resultDto = await catRepository.UpdateAsync(catalog);
            isUpdate = true;
        }

        if (resultDto.IsSuccess)
        {
            await js.InvokeVoidAsync("toast", "انجام شد");

            if (isUpdate == false) //add
            {
                catalog.Id = Convert.ToInt32(resultDto.Message);
                catalogList.Add(catalog);
                catalog = new Domain.Models.shop.Catalog();
            }
            else
            {
                foreach (var item in catalogList)
                {
                    if (item.Id == catalog.Id)
                    {
                        item.Name = catalog.Name;
                        item.Logo = catalog.Logo;
                        break;
                    }
                }
                isAdd = false;
      
            }

        }
        else
        {
            await js.InvokeVoidAsync("toastError", resultDto.Message);
        }
    }

    // 🧩 تابع جدید برای اصلاح سایز SVG
    string FixSvgSize(string svg, int size)
    {
        try
        {
            // حذف تمام width و height های قبلی
            svg = System.Text.RegularExpressions.Regex.Replace(svg, @"width\s*=\s*""[^""]*""", "", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            svg = System.Text.RegularExpressions.Regex.Replace(svg, @"height\s*=\s*""[^""]*""", "", System.Text.RegularExpressions.RegexOptions.IgnoreCase);

            // افزودن سایز جدید بعد از <svg
            svg = System.Text.RegularExpressions.Regex.Replace(svg, @"<svg", $"<svg width=\"{size}px\" height=\"{size}px\"", System.Text.RegularExpressions.RegexOptions.IgnoreCase);

            return svg;
        }
        catch
        {
            return svg; // در صورت خطا، نسخه اصلی را برگردان
        }
    }
}
