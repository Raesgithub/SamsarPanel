@page "/Cpanel/Slider/add"
@page "/Cpanel/Slider/edit/{Id:int}"

@using Domain.Models.panel
@using Domain.Data
@inject ApplicationDbContext Db
@inject IWebHostEnvironment Env

<h3>@(CurrentSlider?.Id == 0 ? "افزودن اسلایدر جدید" : "ویرایش اسلایدر")</h3>

@if (IsLoaded && EditContext != null)
{
    <EditForm EditContext="@EditContext" OnValidSubmit="SaveSlider">
        <div class="card p-4" style="max-width:500px;">
            <InputFile OnChange="HandleSelected" class="form-control" />

            <div class="mt-2">
                <InputText @bind-Value="CurrentSlider.Alt" class="form-control" placeholder="متن جایگزین تصویر" />
            </div>

            <div class="mt-3 text-center">
                <img src="@PreviewImage" class="img-thumbnail" style="max-width:100%; max-height:300px;" />
            </div>

            <div class="mt-3">
                <InputText @bind-Value="CurrentSlider.Title" class="form-control" placeholder="عنوان (اختیاری)" />
            </div>

            <div class="mt-2">
                <InputTextArea @bind-Value="CurrentSlider.Description" class="form-control" placeholder="توضیح (اختیاری)" />
            </div>

            <div class="mt-2">
                <InputText @bind-Value="CurrentSlider.LinkButton" class="form-control" placeholder="لینک دکمه (اختیاری)" />
            </div>

            <div class="form-check mt-3">
                <InputCheckbox @bind-Value="CurrentSlider.IsPublish" class="form-check-input" id="publishCheck" />
                <label class="form-check-label" for="publishCheck">انتشار</label>
            </div>

            <button type="submit" class="btn btn-success mt-3">ذخیره</button>
        </div>
    </EditForm>
}
else
{
    <p>در حال بارگذاری فرم...</p>
}

@code {
    [Parameter] public int? Id { get; set; }

    private Slider CurrentSlider;
    private IBrowserFile? selectedFile;
    private string PreviewImage = "/images/default.jpg";
    private bool IsLoaded = false;
    private EditContext? EditContext;

    protected override async Task OnParametersSetAsync()
    {
        if (Id.HasValue)
        {
            CurrentSlider = await Db.Sliders.FindAsync(Id.Value) ?? new Slider();
        }
        else
        {
            CurrentSlider = new Slider();
        }

        EditContext = new EditContext(CurrentSlider);
        PreviewImage = CurrentSlider.ImageUrl ?? "/images/default.jpg";
        IsLoaded = true;
    }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile != null)
        {
            var buffer = new byte[selectedFile.Size];
            using var stream = selectedFile.OpenReadStream(1024 * 1024 * 15);
            await stream.ReadAsync(buffer);
            PreviewImage = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
        }
    }

    private async Task SaveSlider()
    {
        if (selectedFile != null)
        {
            var uploads = Path.Combine(Env.WebRootPath, "uploads");
            if (!Directory.Exists(uploads))
                Directory.CreateDirectory(uploads);

            var fileName = $"{Guid.NewGuid()}_{selectedFile.Name}";
            var filePath = Path.Combine(uploads, fileName);

            using var fs = new FileStream(filePath, FileMode.Create);
            await selectedFile.OpenReadStream().CopyToAsync(fs);

            CurrentSlider.ImageUrl = $"/uploads/{fileName}";
        }

        if (CurrentSlider.Id == 0)
        {
            Db.Sliders.Add(CurrentSlider);
        }

        await Db.SaveChangesAsync();

        if (CurrentSlider.Id == 0)
        {
            CurrentSlider = new Slider();
            EditContext = new EditContext(CurrentSlider);
            PreviewImage = "/images/default.jpg";
            selectedFile = null;
        }
    }
}
