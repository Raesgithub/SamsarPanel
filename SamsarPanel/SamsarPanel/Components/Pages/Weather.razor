@page "/weather"
@using Microsoft.AspNetCore.Components.QuickGrid
@rendermode @(new InteractiveServerRenderMode(false))
@*  @rendermode InteractiveServer  *@
@inject IJSRuntime js

<QuickGrid Items="@pagedData.AsQueryable()" PageSize="10" TotalItems="@totalItems">
    <Columns>
        <Column Property="Name" Title="Name" />
        <Column Property="Age" Title="Age" />
        <!-- سایر ستون‌ها -->
    </Columns>
</QuickGrid>

@code {
    record Person(int PersonId, string Name, DateOnly BirthDate);
    IQueryable<Person> people = new[]
     {
        new Person(1085, "Jean Martin", new DateOnly(1985, 3, 16)),
        new Person(1094, "António Langa", new DateOnly(1991, 12, 1)),
        new Person(1123, "Julie Smith", new DateOnly(1958, 10, 10)),
        new Person(1125, "Nur Sari", new DateOnly(1922, 4, 27)),
        new Person(1188, "Jose Hernandez", new DateOnly(2011, 5, 3)),
        new Person(1210, "Kenji Sato", new DateOnly(2004, 1, 9)),
         new Person(1895, "Jean Martin", new DateOnly(1985, 3, 16)),
        new Person(1044, "António Langa", new DateOnly(1991, 12, 1)),
        new Person(1103, "Julie Smith", new DateOnly(1958, 10, 10)),
        new Person(1105, "Nur Sari", new DateOnly(1922, 4, 27)),
        new Person(1198, "Jose Hernandez", new DateOnly(2011, 5, 3)),
        new Person(1230, "Kenji Sato", new DateOnly(2004, 1, 9)),
         new Person(10895, "Jean Martin", new DateOnly(1985, 3, 16)),
        new Person(10944, "António Langa", new DateOnly(1991, 12, 1)),
        new Person(11203, "Julie Smith", new DateOnly(1958, 10, 10)),
        new Person(11205, "Nur Sari", new DateOnly(1922, 4, 27)),
        new Person(11898, "Jose Hernandez", new DateOnly(2011, 5, 3)),
        new Person(12130, "Kenji Sato", new DateOnly(2004, 1, 9)),

    }.AsQueryable();
    private List<Person> pagedData;
    private int totalItems;
    List<Person> peoples = new List<Person>();
    protected override async Task OnInitializedAsync()
    {
        pagedData = people.Take(3).ToList();
       // pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }
   
}



@* <EditForm Model="@car" OnValidSubmit="Submit" FormName="aaaa" >
    <InputText @bind-Value="car.Name"/>
    <button>ok</button>
    <button type="button" @onclick="TriggerJavaScript">Click Me</button>
</EditForm>
<h1>@s</h1>
@code{
    private class Car{
        public string Name { get; set; }
    }
    string s = "";
    [SupplyParameterFromForm]
    Car car { get; set; } = new();
    private async Task TriggerJavaScript()
    {
        await js.InvokeVoidAsync("toast","myJavaScriptFunction");
    }
    async Task Submit(){
        s = car.Name;
        await js.InvokeVoidAsync("toast", "myJavaScriptFunction");
      //  await js.InvokeVoidAsync


    }

} *@