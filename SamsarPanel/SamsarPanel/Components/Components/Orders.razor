@page "/orders"
@inject HttpClient http

<h3 class="text-center text-primary fw-bold my-4">📋 لیست سفارش‌ها</h3>

@if (orders == null)
{
    <div class="text-center text-muted my-5">
        <div class="spinner-border text-primary" role="status"></div>
        <p class="mt-3">در حال بارگذاری...</p>
    </div>
}
else if (!orders.Any())
{
    <p class="text-center text-danger fw-bold">هیچ سفارشی ثبت نشده است.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered text-center align-middle shadow-sm">
            <thead class="table-primary">
                <tr>
                    <th>شناسه</th>
                    <th>نام کامل</th>
                    <th>ایمیل</th>
                    <th>تلفن</th>
                    <th>موضوع</th>
                    <th>پیام</th>
                    <th>تاریخ</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in orders)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.FullName</td>
                        <td>@item.Email</td>
                        <td>@item.Phone</td>
                        <td>@item.Subject</td>
                        <td>@item.Message</td>
                        <td>@item.Cdate</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-center align-items-center gap-3 mt-4">
        <button class="btn btn-outline-primary px-4" @onclick="PrevPage" disabled="@(!canPrev)">قبلی</button>
        <span class="fw-bold">صفحه @pageNumber</span>
        <button class="btn btn-outline-primary px-4" @onclick="NextPage" disabled="@(!canNext)">بعدی</button>
    </div>
}

@code {
    private List<OrderViewModel>? orders;
    private int totalCount = 0;
    private int pageNumber = 1;
    private int pageSize = 10;

    private bool canNext => pageNumber * pageSize < totalCount;
    private bool canPrev => pageNumber > 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        try
        {
            var response = await http.GetFromJsonAsync<ResponseData>(
                $"api/shop/getorders?page={pageNumber}&pageSize={pageSize}"
            );

            if (response != null)
            {
                orders = response.data;
                totalCount = response.total;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ خطا در دریافت سفارش‌ها: {ex.Message}");
            orders = new();
        }
    }

    private async Task NextPage()
    {
        pageNumber++;
        await LoadOrders();
    }

    private async Task PrevPage()
    {
        pageNumber--;
        await LoadOrders();
    }

    public class ResponseData
    {
        public List<OrderViewModel> data { get; set; } = new();
        public int total { get; set; }
    }

    public class OrderViewModel
    {
        public int Id { get; set; }
        public string FullName { get; set; } = "";
        public string Email { get; set; } = "";
        public string Phone { get; set; } = "";
        public string Subject { get; set; } = "";
        public string Message { get; set; } = "";
        public string Cdate { get; set; } = "";
        public int ProductId { get; set; }
        public bool IsNew { get; set; }
    }
}
