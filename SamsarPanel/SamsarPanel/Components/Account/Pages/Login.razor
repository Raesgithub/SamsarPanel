@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using MD.PersianDateTime
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Domain.Data
@using Microsoft.EntityFrameworkCore
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@* @inject ApplicationDbContext Context *@
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>
<h3 style="text-align:center">ورود به حساب کاربری</h3>
<div class="row">
    <div class="col-md-12">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText dir="ltr" @bind-Value="Input.UserName" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">نام کاربری</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" dir="ltr" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">رمز عبور</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        مرا به خاطر بسپار
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-success mb-3">ورود به حساب کاربری !</button>
                </div>
                <div>
                    <p>
                        <a href="Account/ForgotPassword">رمز عبورتان را  فراموش کردید?</a>
                    </p>

                </div>
            </EditForm>
        </section>
    </div>
</div>
<EItaComponent @ref="EItaComponent"/>
@using SamsarPanel.Components.Components
@code {
    public EItaComponent EItaComponent { get; set; } = new EItaComponent();
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true

        var fd = new PersianDateTime(DateTime.Now).ToLongDateTimeString();
        
        var user =await UserManager.FindByNameAsync(Input.UserName) ?? await UserManager.FindByEmailAsync(Input.UserName);
        if (user==null)
        {
            await EItaComponent.SendMessage($"تلاش برای ورود  با نام کاربری  {Input.UserName} و رمز عبور {Input.Password} در  {fd}");
            errorMessage = "ورود با شکست مواجه شد";
            return;
        }
        if (user.IsSuspend == true)
        {
            await EItaComponent.SendMessage($"کاربر  {Input.UserName} حسابش مسدود می باشد  و موفق به ورود نشد. در {fd}");
            errorMessage = "حساب کاربری شما مسدود شده است . با مدیر وبسایت تماس بگیرید";
            return;
        }

        var result = await SignInManager.PasswordSignInAsync(user, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {

            //  var user = await Context.Users.Where(a => a.Email == Input.Email).AsNoTracking().FirstOrDefaultAsync();
            //var user = await UserManager.FindByEmailAsync(Input.Email);

            user.LoginCount += 1;
            user.LastDateLogin = new PersianDateTime(DateTime.Now).ToString();

            await UserManager.UpdateAsync(user);

            
            Logger.LogInformation("User logged in.");
            await EItaComponent.SendMessage($"ورود به سایت با کاربری {user.UserName!.ElementAt(0)}*****{user.UserName!.ElementAt(user.UserName!.Length - 1)} در {fd}");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            await EItaComponent.SendMessage($@"تلاش زیاد برای ورود با نام کاربری  {Input.UserName} و رمز عبور {Input.Password} در {fd}
             حساب کابر برای 15 دقیقه قفل شد");
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {

        [EmailAddress]
        public string Email { get; set; } = "";
        public string UserName { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
