@page "/send-message"
@using System.Net.Http
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>ارسال پیام</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="card-title">ارسال پیام</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="messageModel" OnValidSubmit="SendMessage" FormName="f1">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group mb-3">
                            <label for="token" class="form-label">توکن ربات:</label>
                            <InputText id="token" @bind-Value="messageModel.Token" class="form-control" placeholder="bot123456:abc123..." />
                            <ValidationMessage For="@(() => messageModel.Token)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="chatId" class="form-label">شناسه چت:</label>
                            <InputText id="chatId" @bind-Value="messageModel.ChatId" class="form-control" placeholder="220526027" />
                            <ValidationMessage For="@(() => messageModel.ChatId)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="message" class="form-label">متن پیام:</label>
                            <InputTextArea id="message" @bind-Value="messageModel.Message" class="form-control" rows="4" placeholder="متن پیام خود را وارد کنید..." />
                            <ValidationMessage For="@(() => messageModel.Message)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="delay" class="form-label">تأخیر ارسال (ثانیه):</label>
                            <InputNumber id="delay" @bind-Value="messageModel.DelaySeconds" class="form-control" />
                            <ValidationMessage For="@(() => messageModel.DelaySeconds)" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isSending">
                                @if (isSending)
                                {
                                    <span>
                                        <span class="spinner-border spinner-border-sm" role="status"></span>
                                        در حال ارسال...
                                    </span>
                                }
                                else
                                {
                                    <span>ارسال پیام</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    @if (!string.IsNullOrEmpty(responseMessage))
                    {
                        <div class="alert alert-info mt-3">
                            @responseMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">
                            @errorMessage
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm(FormName = "f1")]
    public MessageModel messageModel { get; set; } = new MessageModel();
    private bool isSending = false;
    private string responseMessage = "";
    private string errorMessage = "";

    public class MessageModel
    {
        [Required(ErrorMessage = "توکن اجباری است")]
        public string Token { get; set; } = "bot416818:bc58bc22-16b5-4cb9-b7ea-0794bb0efb0f";

        [Required(ErrorMessage = "شناسه چت اجباری است")]
        public string ChatId { get; set; } = "10938913";

        [Required(ErrorMessage = "متن پیام اجباری است")]
        [StringLength(1000, ErrorMessage = "متن پیام نمی‌تواند بیشتر از 1000 کاراکتر باشد")]
        public string Message { get; set; } = "این یک پیام تست از Blazor است";

        [Range(0, 3600, ErrorMessage = "تأخیر باید بین 0 تا 3600 ثانیه باشد")]
        public int DelaySeconds { get; set; } = 0;
    }

    private async Task SendMessage()
    {
        isSending = true;
        responseMessage = "";
        errorMessage = "";

        try
        {
            //@karimimob
            // ایجاد مدل برای ارسال به API
            var requestData = new
            {
                chat_id = messageModel.ChatId,
                text = messageModel.Message,
                date = DateTimeOffset.UtcNow.ToUnixTimeSeconds() + messageModel.DelaySeconds
            };

            // ارسال درخواست به API
            string apiUrl = $"https://eitaayar.ir/api/{messageModel.Token}/sendMessage";

            var response = await Http.PostAsJsonAsync(apiUrl, requestData);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                responseMessage = $"پیام با موفقیت ارسال شد! پاسخ: {responseContent}";

                // پاک کردن فرم پس از ارسال موفق
                messageModel.Message = "";
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"خطا در ارسال: {response.StatusCode} - {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"خطا: {ex.Message}";
        }
        finally
        {
            isSending = false;
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        // مقداردهی اولیه
    }
}